import groovy.json.JsonSlurper

plugins {
    id 'java'
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
    id "com.peterabeles.gversion" version "1.10.3"
    id "com.diffplug.spotless" version '7.0.2'
    id "checkstyle"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation platform('org.junit:junit-bom:5.12.2')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    // AdvantageKit
    def akitJson = new JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"
}

compileJava {options.encoding = "UTF-8"}
compileTestJava {options.encoding = "UTF-8"}

javadoc {
    options {
        // Cast options to StandardJavadocDocletOptions
        if (options instanceof StandardJavadocDocletOptions) {
            def standardOptions = (StandardJavadocDocletOptions) options
            standardOptions.links(
                    "https://github.wpilib.org/allwpilib/docs/release/java/",
                    "https://choreo.autos/api/choreolib/java/",
                    "https://api.ctr-electronics.com/phoenix6/release/java/",
                    "https://javadocs.photonvision.org/",
                    "https://codedocs.revrobotics.com/java/"
                    )
        }
    }
}

gversion {
    srcDir       = "src/main/java/"
    classPackage = "com.teamrembrandts"
    className    = "BuildConstants"
    dateFormat   = "yyyy-MM-dd HH:mm:ss"
    timeZone     = "Europe/Amsterdam"
    indent       = "    "
}

spotless {
    ratchetFrom 'origin/main'

    java {
        target fileTree("src/main/java/com/teamrembrandts") {
            include "**/*.java"
            exclude "**/build/**", "**/build-*/**"
        }
        toggleOffOn()
        palantirJavaFormat('2.50.0').formatJavadoc(true)
        removeUnusedImports('cleanthat-javaparser-unnecessaryimport')
        importOrder()
        trimTrailingWhitespace()
        endWithNewline()
        formatAnnotations()
        licenseHeaderFile('misc/license-header.txt')
    }
    groovyGradle {
        target fileTree(".") {
            include "**/*.gradle"
            exclude "**/build/**", "**/build-*/**"
        }
        greclipse()
        leadingTabsToSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    json {
        target fileTree(".") {
            include "**/*.json"
            exclude "**/build/**", "**/build-*/**"
        }
        gson().indentWithSpaces(2)
    }
    format "misc", {
        target fileTree(".") {
            include "**/*.md", "**/.gitignore"
            exclude "**/build/**", "**/build-*/**", "**/vendordeps/**"
        }
        trimTrailingWhitespace()
        leadingTabsToSpaces(2)
        endWithNewline()
    }
}

checkstyle {
    toolVersion = '10.12.0'
}

//configurations.configureEach {
//    exclude group: "edu.wpi.first.wpilibj"
//}

tasks.register('replayWatch', JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

project.compileJava.dependsOn(createVersionFile)

// Configure jar and deploy tasks
wpi.java.configureTestTasks(test)

test {
    useJUnitPlatform()
}
